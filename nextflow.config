params {
	//General Pipeline Parameters
	help = false
	outdir = "results"
	single_end = false

	dpi = 300 //not used
	figures = false //not used

	//INPUT Parameters
	reads = false
	sra = false
	apikey = false
	publish_rawreads = false

	//QC Parameters
	no_qc = false
	ref = false
	genome = false
	cleanreads = false
	fastp = false

	adapters = "${baseDir}/assets/bbmap/nextera.fa.gz"
	min_read_length = 50
	logo = "${baseDir}/assets/ikmblogo.png"

	//METAPHLAN Parameters
	metaphlan = false
	updatemetaphlan = false
	metaphlan_db = false
	metaphlan_analysis_type = "rel_ab_w_read_stats"
	strainphlan = false
	publish_metaphlanbam = false

	//HUMAnN Parameters
	humann = false
	updatehumann = false
	humann_db = false

	//KRAKEN Parameters
	virus = false
	kraken = false
	kraken2_db = false
	bracken = false
	bracken_length = 100
	bracken_level = "S"
	bracken_threshold = 0

	//SALMON Parameters
	salmon = false
	salmon_db = false
	salmon_reference = false

	//SYLPH Parameters
	sylph = false
	sylph_db = false
	sylph_merge = false

	//HIGHTHROUGHPUT Parameters
	sylph_processing = false
	salmon_processing = false
	step1 = false
	step2 = false

	//ASSEMBLY Parameters
	assembly = false
	magscot = true
	coassembly = false //a binary switch for performing "all" co-assembly
	assemblymode = false //allowed values: "single", "all" & "group"
	binner = "concoct,maxbin,semibin,metabat,vamb"

	//if coassembly shall be performed, force assemblymode to be "all" if not specified in command line
	if( params.coassembly ){
		assemblymode = "all"
	}else{
		assemblymode = "single"
	}

	semibin_environment = "human_gut"
	contigsminlength = 2000
	gtdbtk_reference = false
	gtdbtk_reference = false
	skip_gtdbtk = false
	updategtdbtk = false
	skip_checkm = false
	publish_megahit = false
	publish_rawbins = false
	//vamb contig separator
	contig_sep = "megahitcontig"
	vamb_groupsize = 100
	minimap_indexsize = 16
	minimap_indexsize = 16

	//MAGSCOT Parameters
	magscot_min_sharing = 0.8
	magscot_score_a = 1
	magscot_score_b = 0.5
	magscot_score_c = 0.5
	magscot_threshold = 0.5
	magscot_min_markers = 25
	magscot_iterations = 2

	// Default Parameters only, expecting to be overwritten
  	max_memory = 256.GB
  	max_cpus = 24
  	max_time = 240.h
  	maxMultiqcEmailFileSize = 25.MB
}

profiles {
	standard {
		includeConfig 'conf/base.config'
		includeConfig 'conf/medcluster.config'
	}
	dx {
		includeConfig 'conf/base.config'
		includeConfig 'conf/ikmb_dx.config'
	}
	medcluster {
		includeConfig 'conf/base.config'
		includeConfig 'conf/medcluster.config'
	}
	biomedinf {
		includeConfig 'conf/base.config'
		includeConfig 'conf/biomedinf.config'
	}
	/*
	caucluster {
		includeConfig 'conf/base.config'
		includeConfig 'conf/caucluster.config'
	}
	*/
	local {
		includeConfig 'conf/base.config'
		includeConfig 'conf/local.config'
	}
	custom {
		includeConfig 'conf/base.config'
		includeConfig 'conf/custom.config'
	}
}


/***********************
	Pipeline Info
 **********************/
 
// Capture exit codes from upstream processes when piping
//process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
	enabled = true
	file = "${params.outdir}/pipeline_info/TOFU-MAaPO_timeline.html"
	overwrite = true
}
report {
	enabled = true
	file = "${params.outdir}/pipeline_info/TOFU-MAaPO_report.html"
	overwrite = true
}
trace {
	enabled = true
	file = "${params.outdir}/pipeline_info/TOFU-MAaPO_trace.txt"
	overwrite = true
}
dag {
	enabled = true
	file = "${params.outdir}/pipeline_info/TOFU-MAaPO_dag.svg"
	overwrite = true
}

manifest {
	homePage = 'https://github.com/ikmb/TOFU-MAaPO.git'
	description = 'This pipeline performs QC and runs Kraken, Metaphlan4, HUMAnN3 and/or genome assembly on SE or a set of PE metagenomic reads.'
	mainScript = 'main.nf'
	version = '1.4.0'
	nextflowVersion = '>= 20.07.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
	try {
	  if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
		return params.max_memory as nextflow.util.MemoryUnit
	  else
		return obj
	} catch (all) {
	  println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
	  return obj
	}
  } else if(type == 'time'){
	try {
	  if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
		return params.max_time as nextflow.util.Duration
	  else
		return obj
	} catch (all) {
	  println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
	  return obj
	}
  } else if(type == 'cpus'){
	try {
	  return Math.min( obj, params.max_cpus as int )
	} catch (all) {
	  println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
	  return obj
	}
  }
}
