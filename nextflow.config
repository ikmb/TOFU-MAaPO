params {
	//General Pipeline Parameters
	help = false
	outdir = "results"
	single_end = false

	dpi = 300 //not used
	figures = false //not used

	//QC Parameters
	no_qc = false
	ref = false
	genome = false
	cleanreads = false

	adapters = "${baseDir}/assets/bbmap/nextera.fa.gz"
	min_read_length = 50
    logo = "${baseDir}/assets/ikmblogo.png"

	//METAPHLAN Parameters
	metaphlan = false
	updatemetaphlan = false
	metaphlan_db = false
	metaphlan_analysis_type = "rel_ab_w_read_stats"
	strainphlan = false

	//HUMANN Parameters
	humann = false
	updatehumann = false
	humann_db = false

	//KRAKEN Parameters
	virus = false
	kraken = false
	kraken2_db = false
	bracken = false
	bracken_length = 100
	bracken_level = "S"
	bracken_threshold = 0

	//ASSEMBLY Paramters
	assembly = false
	magscot = false
	contigsminlength = 2000
	skip_gtdbtk = false

	// Default Parameters only, expecting to be overwritten
  	max_memory = 256.GB
  	max_cpus = 20
  	max_time = 240.h
  	maxMultiqcEmailFileSize = 25.MB
}

profiles {
	standard {
		includeConfig 'conf/base.config'
		includeConfig 'conf/medcluster.config'
	}
	dx {
		includeConfig 'conf/base.config'
		includeConfig 'conf/ikmb_dx.config'
	}
	medcluster {
		includeConfig 'conf/base.config'
		includeConfig 'conf/medcluster.config'
	}
	caucluster {
		includeConfig 'conf/base.config'
		includeConfig 'conf/caucluster.config'
	}
	local {
		includeConfig 'conf/local.config'
		}
}


/***********************
    Pipeline Info
 **********************/
 
// Capture exit codes from upstream processes when piping
//process.shell = ['/bin/bash', '-euo', 'pipefail']

timeline {
	enabled = true
	file = "${params.outdir}/pipeline_info/metawo_timeline.html"
}
report {
	enabled = true
	file = "${params.outdir}/pipeline_info/metawo_report.html"
}
trace {
	enabled = true
	file = "${params.outdir}/pipeline_info/metawo_trace.txt"
}
dag {
	enabled = true
	file = "${params.outdir}/pipeline_info/metawo_dag.svg"
}

manifest {
	homePage = 'https://github.com/ikmb/metagenomic-workflows.git'
	description = 'This pipeline performs QC and runs Kraken, Metaphlan3, HUMAnN3 and/or genome assembly on SE or a set of PE metagenomic reads.'
	mainScript = 'main.nf'
	version = '1.3.0'
	nextflowVersion = '>= 20.07.0'
}

// Function to ensure that resource requirements don't go beyond
// a maximum limit
def check_max(obj, type) {
  if(type == 'memory'){
    try {
      if(obj.compareTo(params.max_memory as nextflow.util.MemoryUnit) == 1)
        return params.max_memory as nextflow.util.MemoryUnit
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max memory '${params.max_memory}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'time'){
    try {
      if(obj.compareTo(params.max_time as nextflow.util.Duration) == 1)
        return params.max_time as nextflow.util.Duration
      else
        return obj
    } catch (all) {
      println "   ### ERROR ###   Max time '${params.max_time}' is not valid! Using default value: $obj"
      return obj
    }
  } else if(type == 'cpus'){
    try {
      return Math.min( obj, params.max_cpus as int )
    } catch (all) {
      println "   ### ERROR ###   Max cpus '${params.max_cpus}' is not valid! Using default value: $obj"
      return obj
    }
  }
}
