

// Process setting

process {

  errorStrategy = { task.attempt <= 3 ? 'retry' : 'finish' }
  maxRetries = 3
  maxErrors = '-1'
 
  // Specific cluster parameters for each process

    withName:'FILTERREADS_PE|FILTERREADS_SE|CLEANREADS_PE|CLEANREADS_SE' {
	  cpus = { check_max( 16 * task.attempt, 'cpus' ) }
  	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  	time = { check_max( 8.h * task.attempt, 'time' ) }
  }
  
  withName:'TRIMREADS' {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  withName: 'FASTQC_raw|FASTQC_clean' {
	  cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 8.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
  }

  withLabel: 'metaphlan' {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }

  withLabel: 'bbmap' {
	  cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
	  time = { check_max( 12.h * task.attempt, 'time' ) }
  }

  withLabel: 'vamb' {
	  cpus = { check_max( 16 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
	  time = { check_max( 24.h * task.attempt, 'time' ) }
  }

  withLabel: 'bowtie2' {
    cpus = { check_max( 16 * task.attempt, 'cpus' ) }
  	memory = { check_max( 64.GB * task.attempt, 'memory' ) }
  	time = { check_max( 48.h * task.attempt, 'time' ) }
	  //container = "docker://quay.io/biocontainers/bowtie2:2.4.2--py38h1c8e9b9_1"
  }

  withLabel: 'megahit' {
    cpus = { check_max( 16 * task.attempt, 'cpus' ) }
  	memory = { check_max( 128.GB * task.attempt, 'memory' ) }
  	time = { check_max( 72.h * task.attempt, 'time' ) }
  }

  withLabel: 'metabat2' {
    cpus = { check_max( 16 * task.attempt, 'cpus' ) }
  	memory = { check_max( 64.GB * task.attempt, 'memory' ) }
  	time = { check_max( 72.h * task.attempt, 'time' ) }
  }

  withLabel: 'checkm' {
    cpus = { check_max( 16 * task.attempt, 'cpus' ) }
  	memory = { check_max( 150.GB * task.attempt, 'memory' ) }
  	time = { check_max( 72.h * task.attempt, 'time' ) }
    container = "docker://quay.io/biocontainers/checkm-genome:1.1.3--py_1"
    maxForks = 5
  }

  withLabel: 'gtdbtk' {
    //container = "ecogenomic/gtdbtk:2.0.0"
    cpus = { check_max( 16 * task.attempt, 'cpus' ) }
  	memory = { check_max( 64.GB * task.attempt, 'memory' ) }
  	time = { check_max( 168.h * task.attempt, 'time' ) }
    maxForks = 5
  }

  withLabel: 'humann' {
	  cpus = { check_max( 16 * task.attempt, 'cpus') }
	  memory = { check_max( 64.GB * task.attempt, 'memory') }
	  time = { check_max( 24.h * task.attempt, 'time') }
	}

  withLabel: 'multiqc' {
	  container = "docker://quay.io/biocontainers/multiqc:1.12--pyhdfd78af_0"
  }

  withLabel: 'kraken' {
    container = "docker://quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2"
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 64.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }

  withLabel: 'bracken' {
    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
  }

  withLabel: 'magscot' {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
    memory = { check_max( 32.GB * task.attempt, 'memory' ) }
    time = { check_max( 16.h * task.attempt, 'time' ) }
    container = 'ikmb/magscot:latest'
  }

  withLabel: 'maxbin2' {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  	time = { check_max( 24.h * task.attempt, 'time' ) }
  }
  
    withLabel: 'concoct' {
    cpus = { check_max( 8 * task.attempt, 'cpus' ) }
  	memory = { check_max( 32.GB * task.attempt, 'memory' ) }
  	time = { check_max( 24.h * task.attempt, 'time' ) }
  }

  // Global cluster parameters

    cpus = { check_max( 4 * task.attempt, 'cpus' ) }
    memory = { check_max( 16.GB * task.attempt, 'memory' ) }
    time = { check_max( 8.h * task.attempt, 'time' ) }
}


