// Process setting

process {

	shell = ['/bin/bash', '-euo', 'pipefail']

	errorStrategy = { task.attempt <= 3 ? 'retry' : 'finish' }
	maxRetries = 3
	maxErrors = '-1'
	container = "docker://ikmb/metagenome:1.5.0"

	// Specific cluster parameters for each process
	withLabel: 'local_run' {
		executor = 'local'
		cpus = { check_max( 1 * task.attempt, 'cpus' ) }
		memory = { check_max( 4.GB * task.attempt, 'memory' ) }
		container = "docker://ikmb/metagenome:1.5.0"
	}
	
	withLabel: 'local_download' {
		executor = 'local'
		errorStrategy = {
			sleep( Math.pow( 2, task.attempt ) * 200 as long )
			return 'retry'
		}
		maxRetries = 10
		maxForks = 10
		cpus = { check_max( 1 * task.attempt, 'cpus' ) }
		memory = { check_max( 4.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/curl:7.80.0"
	}

	withLabel: 'default' {
		cpus = { check_max( 4 * task.attempt, 'cpus' ) }
		memory = { check_max( 15.GB * task.attempt, 'memory' ) }
		container = "docker://ikmb/metagenome:1.5.0"
	}

	withLabel: 'default_highmemory' {
		cpus = { check_max( 4 * task.attempt, 'cpus' ) }
		memory = { check_max( 60.GB * (2**(task.attempt-1)), 'memory' ) }
		container = "docker://ikmb/metagenome:1.5.0"
	}

	withLabel: 'entrez' {
		maxForks = 5
		errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
		executor = 'local'
		cpus = { check_max( 1 * task.attempt, 'cpus' ) }
		memory = { check_max( 4.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/entrez-direct:22.4--he881be0_0"
	}

	withLabel: 'fastqc' {
		cpus = { check_max( 2 * task.attempt, 'cpus' ) }
		memory = { check_max( 8.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/fastqc:0.11.9--hdfd78af_1"
	}

	withLabel: 'metaphlan' {
		cpus = { check_max( 8 * task.attempt, 'cpus' ) }
		memory = { check_max( 20.GB * task.attempt, 'memory' ) }
		container = "docker://ikmb/metagenome:1.5.0"
	}

	withLabel: 'bbmap' {
		cpus = { check_max( 12 * task.attempt, 'cpus' ) }
		memory = { check_max( 30.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/bbmap:39.00--h5c4e2a8_0"
	}

	withLabel: 'fastp' {
		cpus = { check_max( 4 * task.attempt, 'cpus' ) }
		memory = { check_max( 8.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/fastp:0.23.4--hadf994f_2"
	}

	withLabel: 'bowtie2qc' {
		cpus = { check_max( 12 * task.attempt, 'cpus' ) }
		memory = { check_max( 30.GB * task.attempt, 'memory' ) }
		container = "docker://ikmb/metagenome:1.5.0"
	}

	withLabel: 'vamb' {
		cpus = { check_max( 12 * task.attempt, 'cpus' ) }
		memory = { check_max( 30.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/vamb:3.0.2--py36h91eb985_2"
	}

	withLabel: 'bowtie2' {
		cpus = { check_max( 12 * task.attempt, 'cpus' ) }
		memory = { check_max( 60.GB * task.attempt, 'memory' ) }
		container = "docker://ikmb/metagenome:1.5.0"
	}

	withLabel: 'megahit' {
		cpus = { check_max( 12 * task.attempt, 'cpus' ) }
		memory = { check_max( 30.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/megahit:1.2.9--h2e03b76_1"
	}

	withLabel: 'metabat2' {
		cpus = { check_max( 12 * task.attempt, 'cpus' ) }
		memory = { check_max( 30.GB * task.attempt, 'memory' ) }
		container = "docker://ikmb/metagenome:1.5.0"
	}

	withLabel: 'semibin' {
		cpus = { check_max( 12 * task.attempt, 'cpus' ) }
		memory = { check_max( 40.GB * task.attempt, 'memory' ) }
	}

	withLabel: 'checkm' {
		cpus = { check_max( 12 * task.attempt, 'cpus' ) }
		memory = { check_max( 80.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/checkm-genome:1.1.3--py_1"
	}

	withLabel: 'gtdbtk' {
		cpus = { check_max( 12 * task.attempt, 'cpus' ) }
		memory = { check_max( 100.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/gtdbtk:2.3.2--pyhdfd78af_0"
	}

	withLabel: 'humann' {
		cpus = { check_max( 12 * task.attempt, 'cpus') }
		memory = { check_max( 40.GB * (2**(task.attempt-1)), 'memory') }
		container = "docker://ikmb/metagenome:1.5.0"
	}

	withLabel: 'multiqc' {
		cpus = { check_max( 8 * task.attempt, 'cpus' ) }
		memory = { check_max( 16.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/multiqc:1.15--pyhdfd78af_0"
	}

	withLabel: 'kraken' {
		container = "docker://quay.io/biocontainers/kraken2:2.1.2--pl5321h9f5acd7_2"
		cpus = { check_max( 8 * task.attempt, 'cpus' ) }
		memory = { check_max( 60.GB * task.attempt, 'memory' ) }
	}

	withLabel: 'bracken' {
		cpus = { check_max( 4 * task.attempt, 'cpus' ) }
		memory = { check_max( 15.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/bracken:2.8--py27hc30c61c_0"
	}

	withLabel: 'magscot' {
		cpus = { check_max( 8 * task.attempt, 'cpus' ) }
		memory = { check_max( 20.GB * task.attempt, 'memory' ) }
		container = "docker://ikmb/magscot:v1.1"
	}

	withLabel: 'maxbin2' {
		errorStrategy = { task.attempt <= 3 ? 'retry' : 'ignore' }
		cpus = { check_max( 8 * task.attempt, 'cpus' ) }
		memory = { check_max( 10.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/maxbin2:2.2.7--h87f3376_4"
	}

	withLabel: 'concoct' {
		cpus = { check_max( 8 * task.attempt, 'cpus' ) }
		memory = { check_max( 10.GB * task.attempt, 'memory' ) }
		container = "docker://ikmb/metagenome:1.5.0"
	}

	withLabel: 'salmon' {
		cpus = { check_max( 8 * task.attempt, 'cpus' ) }
		memory = { check_max( 80.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/salmon:1.10.1--hecfa306_2"
	}

	withLabel: 'sylph_sketch' {
		cpus = { check_max( 1 * task.attempt, 'cpus' ) }
		memory = { check_max( 4.GB * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/sylph:0.5.1--h4ac6f70_0"
	}

	withLabel: 'sylph_profile' {
		cpus = { check_max( (params.sylph_merge ? 16 : 1) * task.attempt, 'cpus' ) }
		memory = { check_max( (params.sylph_merge ? 20.GB : 15.GB) * task.attempt, 'memory' ) }
		container = "docker://quay.io/biocontainers/sylph:0.5.1--h4ac6f70_0"
	}

	withLabel: 'exclusive' {
		if(process.executor == 'slurm'){
			clusterOptions = '--exclusive'
		} else {
			cpus = { check_max( 999, 'cpus' ) }
		}
	}

	// Global parameters

	cpus = { check_max( 4 * task.attempt, 'cpus' ) }
	memory = { check_max( 16.GB * task.attempt, 'memory' ) }
	time = { check_max( 4.h * task.attempt, 'time' ) }

	withLabel: 'short_run' {
		time = { check_max( 8.h * task.attempt, 'time' ) }
	}
	withLabel: 'medium_run' {
		time = { check_max( 12.h * task.attempt, 'time' ) }
	}
	withLabel: 'long_run' {
		time = { check_max( 24.h * task.attempt, 'time' ) }
	}
		withLabel: 'very_long_run' {
		time = { check_max( 48.h * task.attempt, 'time' ) }
	}
}
