
// Job paramaters to set for this environment

params {
// SCRATCH
	scratch = true

// Software DB locations
	metaphlan_db = "/work_ikmb/ikmb_repository/databases/Metaphlan/4.0"
	metaphlan_db_test = "${params.metaphlan_db}/mpa_v31_CHOCOPhlAn_201901.1.bt2"

	kraken2_db = "/work_ikmb/ikmb_repository/databases/Kraken2/k2_viral_20210517"
	
	//TODO: CHANGE THIS for a permanently solution:
	humann_db = "/work_ikmb/ikmb_repository/databases/Humann3/3.6"

	humann_db_test = "${params.humann_db}/uniref/uniref90_201901b_full.dmnd"

	gtdbtk_reference = "/work_ikmb/ikmb_repository/databases/GTDB-TK/release207_v2"

	salmon_db = "/work_ikmb/ikmb_repository/shared/microbiome/processed_datasets/collections/GloHuGG/SGB_representatives/salmon_index"
	salmon_reference = "/work_ikmb/ikmb_repository/shared/microbiome/processed_datasets/collections/GloHuGG/SGB_representatives/GloHuGG.GTDBr214.cluster_final_tax.tsv"

	//reference genomes for host removal
	'genomes' {
		'human' {
			bowtie_index = "/work_ikmb/ikmb_repository/references/iGenomes/references/Homo_sapiens/NCBI/GRCh38Decoy/Sequence/Bowtie2Index/genome"
		}
		'mouse' {
			bowtie_index = "/work_ikmb/ikmb_repository/references/iGenomes/references/Mus_musculus/Ensembl/GRCm38/Sequence/Bowtie2Index/genome"
		}
		'chimp' {
			bowtie_index = "/work_ikmb/ikmb_repository/references/iGenomes/references/Pan_troglodytes/Ensembl/CHIMP2.1.4/Sequence/Bowtie2Index/genome"
		}
	}

// Defaults only, expecting to be overwritten
	max_memory = 250.GB
	max_cpus = 24
	max_time = 240.h
	maxMultiqcEmailFileSize = 25.MB
}

// Resource manager settings

executor {
	name="slurm"
	queueSize=35
}

env {
    http_proxy="http://relay:3128"
    https_proxy="http://relay:3128"
    ftp_proxy="http://relay:3128"
}

// Process setting

process {

// Global cluster parameters
	executor = 'slurm'
	queue = 'base'

	withLabel: 'local_download' {
		executor = 'slurm'
		queue = 'base'
	}
	withLabel: 'entrez' {
		executor = 'slurm'
		queue = 'base'
	}

	withLabel: 'gpu' {
	executor = 'slurm'
	if(params.gpu){queue = 'gpu'}
  }

// PROCESS TIME
	withLabel: 'short_run' {
		time = { check_max( 8.h * task.attempt, 'time' ) }
		clusterOptions = {
			def requestedTime = check_max( 8.h * task.attempt, 'time' )
			def maxSeconds = requestedTime.toSeconds()
			return maxSeconds > 48 * 3600 ? '--qos=long' : ''
		}
	}
	withLabel: 'medium_run' {
		time = { check_max( 12.h * task.attempt, 'time' ) }
		clusterOptions = {
			def requestedTime = check_max( 12.h * task.attempt, 'time' )
			def maxSeconds = requestedTime.toSeconds()
			return maxSeconds > 48 * 3600 ? '--qos=long' : ''
		}
	}
	withLabel: 'long_run' {
		time = { check_max( 24.h * task.attempt, 'time' ) }
		clusterOptions = {
			def requestedTime = check_max( 24.h * task.attempt, 'time' )
			def maxSeconds = requestedTime.toSeconds()
			return maxSeconds > 48 * 3600 ? '--qos=long' : ''
		}
	}
	withLabel: 'very_long_run' {
		time = { check_max( 48.h * task.attempt, 'time' ) }
		clusterOptions = {
			def requestedTime = check_max( 48.h * task.attempt, 'time' )
			def maxSeconds = requestedTime.toSeconds()
			return maxSeconds > 48 * 3600 ? '--qos=long' : ''
		}
	}
// PROCESS SPECIFIC CLUSTER PARAMETERS
	withLabel: 'sylph_profile' {
		//clusterOptions = '-C fast'
		
		clusterOptions = {
			def requestedTime = check_max( 49.h * task.attempt, 'time' )
			def maxSeconds = requestedTime.toSeconds()
			return maxSeconds > 48 * 3600 ? '--qos=long' : ''
		}
	}
	withLabel: 'sylph_sketch' {
		//clusterOptions = '-C fast'
		
		clusterOptions = {
			def requestedTime = check_max( 49.h * task.attempt, 'time' )
			def maxSeconds = requestedTime.toSeconds()
			return maxSeconds > 48 * 3600 ? '--qos=long' : ''
		}
	}
}

singularity {
	enabled = true
	runOptions = "-B /scratch -B /work_ikmb"
	cacheDir = "/work_ikmb/ikmb_repository/singularity_cache"
}
